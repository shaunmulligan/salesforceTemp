{
  "name": "ds18x20",
  "description": "A node.JS implementation for using the DS1820, DS18S20 and/or DS18B20 temperature sensor with Raspberry Pi.",
  "version": "0.1.1",
  "main": "index",
  "author": {
    "name": "Marcus Bergman",
    "email": "mraxus@gmail.com"
  },
  "scripts": {
    "test": "node_modules/.bin/tap ./test"
  },
  "keywords": [
    "raspberry pi",
    "sensor",
    "temperature",
    "thermometer",
    "ds1820",
    "ds18s20",
    "ds18b20",
    "ds18x20",
    "raspberry",
    "pi"
  ],
  "dependencies": {
    "async": "~0.2.9",
    "sandal": "~1.0.1",
    "execSync": "~1.0.1-pre"
  },
  "devDependencies": {
    "tap": "~0.4.6",
    "interpreted": "~0.4.0"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/mraxus/ds18x20.js/raw/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mraxus/ds18x20.js"
  },
  "engines": {
    "node": "*"
  },
  "readme": "ds18x20.js\r\n==========\r\n\r\nA node.JS implementation for using the DS1820, DS18S20 and/or DS18B20 temperature sensor with Raspberry Pi.\r\n\r\n\r\n[![NPM](https://nodei.co/npm/ds18x20.png?downloads=true)](https://nodei.co/npm/ds18x20/)\r\n\r\n## Description\r\n\r\nThis package is to be used by [Raspberry Pi](http://www.raspberrypi.org/) installed with [node.JS](http://blog.rueedlinger.ch/2013/03/raspberry-pi-and-nodejs-basic-setup/ \"How to install node on RPi\") to interact with the awesome temperature sensors [DS1820](http://www.maximintegrated.com/datasheet/index.mvp/id/2795), [DS18S20](http://www.maximintegrated.com/datasheet/index.mvp/id/2815) and [DS18B20](http://www.maximintegrated.com/datasheet/index.mvp/id/2812) made by [Maxim integrated](http://www.maximintegrated.com/).\r\n\r\nAt time of writing only the DS18B20 sensor have been tested out with this package. Please tell me if you get the chance to test it with the other sensors.\r\n\r\n## Installation\r\n\r\n    $ npm install ds18x20\r\n\r\n## Usage\r\n\r\nEach function in this library can be used sync or async. The same functions are used. The only difference is that if the last argument have a callback function, then it's an async function. There will be examples below for each function, both as sync and async.\r\n\r\n\r\n### Declaring the sensor library\r\n\r\n```js\r\nvar sensor = require('ds18x20');\r\n```\r\n\r\n### Check if driver is loaded\r\n\r\nTo be able to probe the sensors, the temperature driver needs to be loaded in your Raspberry pi (done with the command ```sudo modprobe w1-gpio && sudo modprobe w1-therm```).\r\n\r\n#### async\r\n\r\n```js\r\nsensor.isDriverLoaded(function (err, isLoaded) {\r\n    console.log(isLoaded);\r\n});\r\n```\r\n\r\n#### sync\r\n\r\n```js\r\nvar isLoaded = sensor.isDriverLoaded();\r\nconsole.log(isLoaded);\r\n```\r\n\r\n#### output\r\n\r\n```js\r\ntrue / false\r\n```\r\n\r\n\r\n### Load the driver\r\n\r\nShould the driver not be loaded you can use the command below. However, to run this command you need to be root (```sudo node```).\r\nInstead of loading the driver through node, I recommend loading the driver at startup through shell script: ```sudo modprobe w1-gpio && sudo modprobe w1-therm```.\r\n\r\n#### async\r\n\r\n```js\r\nsensor.loadDriver(function (err) {\r\n    if (err) console.log('something went wrong loading the driver:', err)\r\n    else console.log('driver is loaded');\r\n});\r\n```\r\n\r\n#### sync\r\n\r\n```js\r\ntry {\r\n    sensor.loadDriver();\r\n    console.log('driver is loaded');\r\n} catch (err) {\r\n    console.log('something went wrong loading the driver:', err)\r\n}\r\n```\r\n\r\n\r\n### List all available sensors\r\n\r\n#### async\r\n\r\n```js\r\nsensor.list(function (err, listOfDeviceIds) {\r\n    console.log(listOfDeviceIds);\r\n});\r\n```\r\n\r\n#### sync\r\n\r\n```js\r\nvar listOfDeviceIds = sensor.list();\r\nconsole.log(listOfDeviceIds);\r\n```\r\n\r\n#### output\r\n\r\n```js\r\n[ '28-00000574c791', '28-00000574f4f3' ]\r\n```\r\n\r\n\r\n### Get the temperature from all avaiable sensors\r\n\r\nThe temperature is requested from each sensor. The result is returned in Celsius degrees and rounded to in decimal place.\r\n\r\n#### async\r\n\r\n```js\r\nsensor.getAll(function (err, tempObj) {\r\n    console.log(tempObj);\r\n});\r\n```\r\n\r\n#### sync\r\n\r\n```js\r\nvar tempObj = sensor.getAll();\r\nconsole.log(tempObj);\r\n```\r\n\r\n#### output\r\n\r\nTemperature in x° C\r\n```js\r\n{ '28-00000574c791': 22.9, '28-00000574f4f3': 22.8 }\r\n```\r\n\r\n\r\n### Get the temperature from one or several sensors\r\n\r\nThe result is returned in Celsius degrees and rounded to in decimal place.\r\n\r\n#### async\r\n\r\n```js\r\nsensor.get('28-00000574c791', function (err, temp) {\r\n    console.log(temp);\r\n});\r\n```\r\n\r\n#### sync\r\n\r\n```js\r\nvar temp = sensor.get('28-00000574c791');\r\nvar listOfTemps = sensor.get(['28-00000574c791', '28-00000574f4f3']);\r\nconsole.log(temp);\r\nconsole.log(listOfTemps);\r\n```\r\n\r\n#### output\r\n\r\nTemperature in x° C\r\n```js\r\n23.1\r\n[ 23.1, 23.2 ]\r\n```\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mraxus/ds18x20.js/issues"
  },
  "homepage": "https://github.com/mraxus/ds18x20.js",
  "_id": "ds18x20@0.1.1",
  "dist": {
    "shasum": "95d440c684ac70024b3484ceb73840c57e433741",
    "tarball": "http://registry.npmjs.org/ds18x20/-/ds18x20-0.1.1.tgz"
  },
  "_from": "ds18x20@^0.1.1",
  "_npmVersion": "1.3.21",
  "_npmUser": {
    "name": "mraxus",
    "email": "mraxus@gmail.com"
  },
  "maintainers": [
    {
      "name": "mraxus",
      "email": "mraxus@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "95d440c684ac70024b3484ceb73840c57e433741",
  "_resolved": "https://registry.npmjs.org/ds18x20/-/ds18x20-0.1.1.tgz"
}
